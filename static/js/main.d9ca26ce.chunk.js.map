{"version":3,"sources":["firebase.js","Stock.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Stock","handleCounter","props","cartList","className","key","this","galleryObject","onClick","src","data","image","alt","title","price","printsSelected","Component","App","galleryItems","state","cart","push","total","map","priceItem","number","parseFloat","replace","setState","totalPrice","toFixed","handleRemove","mapIndex","updatedCart","filter","item","i","openCart","document","getElementById","style","width","padding","closeCart","gallery","database","ref","on","response","console","log","val","newState","href","length","cartItem","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9ca26ce.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAwCMbdEPHrXJ1ozNo_J9sdpV6HYtzcqNw\",\n    authDomain: \"rugged-footprints-shop.firebaseapp.com\",\n    databaseURL: \"https://rugged-footprints-shop.firebaseio.com\",\n    projectId: \"rugged-footprints-shop\",\n    storageBucket: \"rugged-footprints-shop.appspot.com\",\n    messagingSenderId: \"562935868864\",\n    appId: \"1:562935868864:web:cf408414063475977aec25\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\n\nexport class Stock extends Component {\n\n    handleCounter = () => {\n    this.props.cartList();\n    \n    \n  };\n    \n    \n  render() {\n    return (\n      <div className=\"galleryItem\">\n        <li key={this.props.galleryObject.key}>\n          <button onClick={this.handleCounter}>\n              <img src={this.props.galleryObject.data.image} alt=\"\" />\n              <div className=\"overlay\">\n                <p>Add to Cart</p>\n              </div>\n          </button>\n\n          <h3>{this.props.galleryObject.data.title}</h3> {/*title*/}\n          <h4>Price: {this.props.galleryObject.data.price}</h4> {/*price*/}\n          <p>Prints Available: {10 - this.props.printsSelected}</p>{/*prints in stock*/}\n          {/* <button onClick={this.handleCounter}>Add to Cart</button> */}\n        </li>\n\n      </div>\n    );\n  }\n}\n\nexport default Stock;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\nimport Stock from './Stock.js';\n\n\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gallery: [],\n      cart: [],\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      console.log(response.val());\n\n      const newState = [];\n      const data = response.val();\n\n      for (const key in data) {\n        newState.push({\n          key: key,\n          data: data[key]\n        });\n      }\n\n      this.setState({\n        gallery: newState,\n      });\n    });\n  }\n\n// update cart list\n  cartList = galleryObject => {\n    // created new array \n    const galleryItems = [...this.state.cart];\n    galleryItems.push(galleryObject);\n\n    let total = 0\n    \n    galleryItems.map((priceItem) => {\n      let number = parseFloat(priceItem.data.price.replace('$',''))\n      total = total + number\n    })\n    \n  \n    this.setState({\n      cart: galleryItems,\n      totalPrice: '$'+total.toFixed(2),\n    });\n  }\n\n// remove function for shopping cart list\n  handleRemove = mapIndex => {\n    const cartList = [...this.state.cart];\n    const updatedCart = cartList.filter((item, i) => i !== mapIndex);\n    this.setState({\n      cart: updatedCart,\n    })\n  }\n\n  // code used from example: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_sidenav\n  openCart = () => {\n    document.getElementById(\"shoppingCart\").style.width = \"250px\";\n    document.getElementById(\"shoppingCart\").style.padding = \"20px\";\n  }\n\n  closeCart = () => {\n    document.getElementById(\"shoppingCart\").style.width = \"0\";\n    document.getElementById(\"shoppingCart\").style.padding = \"0\";\n  }\n  \n  render() {\n    \n      return (\n        <div className=\"App\">\n          {/* header */}\n          <header>\n            <nav>\n              <div className=\"wrapper nav\">\n                <ul>\n                  <li>\n                    <a href=\"https://www.ruggedfootprints.com/category/travel/\">\n                      // Travel Blog\n                    </a>\n                  </li>\n                </ul>\n\n                <div className=\"rightNav\">\n                  <a href=\"https://www.instagram.com/ruggedfootprints/\">\n                    <i className=\"fab fa-instagram\"></i>\n                    \n                  </a>\n                  <i onClick={this.openCart} className=\"fas fa-shopping-cart\"></i>\n                  <p>{this.state.cart.length}</p> \n                </div>\n                \n              </div>\n            </nav>\n\n            <div className=\"heroContainer wrapper\">\n              <h1>Rugged // Footprints Shop</h1>\n              <h2>Photography by Sakib I.</h2>\n              <p>\n                Mid-20s, currently lives in Silicon Valley, California but\n                raised in Scarborough/Toronto, ON, Canada. By occupation is a\n                hardware engineer. Avid traveller, advocate of health & fitness,\n                photography noobie.\n              </p>\n            </div>\n          </header>\n\n          {/* main */}\n          <main className=\"wrapper\">\n            {/* photo gallery */}\n            <ul className=\"gallery\">\n              {this.state.gallery.map((galleryObject) => {\n                return (\n                  // prints available counter\n                  <Stock\n                    galleryObject={galleryObject}\n                    cartList={() => this.cartList(galleryObject)}\n                    printsSelected={\n                      this.state.cart.filter((cartItem) => {\n                        return cartItem.data.title === galleryObject.data.title;\n                      }).length\n                    }\n                  />\n                );\n              })}\n            </ul>\n\n            {/* shopping cart item counter */}\n            {this.state.cart.length >= 0 ? (\n              <div id=\"shoppingCart\" className=\"shoppingCart\">\n                <div className=\"cartTitle\">\n                  <h3>Shopping Cart</h3>\n\n                  {/* cart counter */}\n                  <p>\n                    {this.state.cart.length}\n                    <i className=\"fas fa-shopping-cart\"></i>\n                  </p>\n\n                  {/* cart close button */}\n                  <i onClick={this.closeCart} className=\"far fa-window-close closeButton\"></i>\n                </div>\n                \n\n                {/* importing selected gallery items into shopping cart list */}\n                {this.state.cart.map((cartItem, mapIndex) => {\n                  return (\n                    <li>\n                      <img\n                        src={cartItem.data.image}\n                        alt={cartItem.data.title}\n                      />\n                      <div className=\"photoInfo\">\n                        <h5>{cartItem.data.title}</h5> {/*title*/}\n                        <p>Price:{cartItem.data.price}</p> {/*price*/}\n                      </div>\n\n                      {/* remove button to remove items from shopping list */}\n                      <button\n                        className=\"trash\"\n                        onClick={() => this.handleRemove(mapIndex)}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </button>\n                    </li>\n                  );\n                })}\n\n                <p>Total Price {this.state.totalPrice}</p>\n\n                <button>Submit Order</button>\n              </div>\n            ) : (\n              <p className=\"placeHolder\"></p>\n            )}\n          </main>\n\n          <footer>\n            <p>Original Photographs by Sakib.I - <a href=\"https://www.ruggedfootprints.com/category/travel/\">Rugged // Footprints</a></p>\n            <p>Created by <a href=\"https://github.com/bksokhi\">Baljit Sokhi</a> at Juno College</p>\n          </footer>\n        </div>\n      );}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}